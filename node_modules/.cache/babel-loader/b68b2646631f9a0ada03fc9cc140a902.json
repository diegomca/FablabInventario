{"ast":null,"code":"import _slicedToArray from \"/Users/diego/Documents/8_semestre/Taller-de-Aplicaciones/inventarioFablab/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/diego/Documents/8_semestre/Taller-de-Aplicaciones/inventarioFablab/src/registro/opciones/actualizar/ActualizaStock.jsx\";\nimport React, { useState, useMemo, useEffect } from 'react';\nimport { Button, Form, Grid, TextArea, Card, Table, Modal, Header, Icon } from 'semantic-ui-react';\nimport Productselect from './ProductActualizar';\nimport { UserContext } from \"../UseContext\";\nimport { getListaProducto, updateProductoStock, setRegistro, setArchivo } from '../../../firebase';\n\nfunction ActualizarStock() {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        file = _useState2[0],\n        setFile = _useState2[1];\n\n  const _useState3 = useState(null),\n        _useState4 = _slicedToArray(_useState3, 2),\n        nameFile = _useState4[0],\n        setNameFile = _useState4[1];\n\n  const getFile = e => {\n    setFile(e.target.files[0]);\n    setNameFile(e.target.files[0].name);\n  };\n\n  const fileInputRef = React.createRef();\n\n  const _useState5 = useState([]),\n        _useState6 = _slicedToArray(_useState5, 2),\n        productSelect = _useState6[0],\n        setProductSelect = _useState6[1];\n\n  const _useState7 = useState([]),\n        _useState8 = _slicedToArray(_useState7, 2),\n        productos = _useState8[0],\n        setProductos = _useState8[1];\n\n  const _useState9 = useState(true),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isShowingModal = _useState10[0],\n        setIsShowingModal = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        isClose = _useState12[0],\n        setIsclose = _useState12[1];\n\n  const _useState13 = useState(\"\"),\n        _useState14 = _slicedToArray(_useState13, 2),\n        descripcion = _useState14[0],\n        setDescripcion = _useState14[1];\n\n  const providerValue = useMemo(() => ({\n    productSelect,\n    setProductSelect\n  }), [productSelect, setProductSelect]);\n  useEffect(() => {\n    (async function () {\n      try {\n        getListaProducto(response => {\n          setProductos(response);\n        });\n      } catch (e) {\n        console.error(e);\n      }\n    })(); // eslint-disable-next-line\n\n  }, []);\n\n  const confirmarPedido = evt => {\n    if (productSelect.length > 0) {\n      setIsShowingModal(!isShowingModal);\n      setIsclose(!isClose);\n    }\n  };\n\n  const handleSubmit = evt => {\n    if (productSelect.length >= 1) {\n      productSelect.map(productos => {\n        let new_stock = Number(productos.stock) + Number(productos.cantidad);\n        let new_disponible = Number(productos.disponible) + Number(productos.cantidad);\n        console.log(new_disponible);\n        console.log(new_stock);\n        updateProductoStock(new_stock, new_disponible, productos.ruta);\n      });\n      var lista = [];\n      productSelect.map(wea => {\n        lista.push({\n          marca: wea.marca,\n          modelo: wea.modelo,\n          cantidad: wea.cantidad,\n          stock: wea.stock\n        });\n      });\n      var fecha_date = new Date();\n      var ano = fecha_date.getFullYear();\n      let temp_subir = {\n        encargado: \"Administrador\",\n        peticion: \"Actualizar stock\",\n        lista: lista,\n        fecha: Date.now(),\n        comentario: descripcion,\n        aÃ±o: ano,\n        mes: fecha_date.getMonth()\n      };\n      setRegistro(temp_subir, resp => {\n        if (resp) {\n          window.location = '/registro';\n        }\n      });\n    } else {\n      alert(\"Error en los datos, todos los datos son obligatorios y debe seleccionar productos obligatoriamente\");\n    }\n  };\n\n  return React.createElement(UserContext.Provider, {\n    value: providerValue,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(Card, {\n    fluid: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(Card.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    columns: \"equal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, React.createElement(Grid.Column, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, isShowingModal ? React.createElement(Modal, {\n    open: isClose,\n    trigger: React.createElement(Button, {\n      onClick: e => setIsclose(!isClose),\n      fluid: true,\n      color: \"youtube\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, \" Lista de Productos\"),\n    size: \"small\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Actualizar Stock de Productos\"), React.createElement(Modal.Content, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Modal.Description, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Lista de Productos\"), React.createElement(Table, {\n    celled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, \"Producto  \"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Articulos Disponibles\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Cantidad\"), React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Seleccionar\"))), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, productos.map((producto, index) => {\n    const stock = producto.stock,\n          marca = producto.marca,\n          modelo = producto.modelo,\n          codigo = producto.codigo,\n          key = producto.key,\n          disponible = producto.disponible;\n    return React.createElement(Productselect, {\n      key: index,\n      marca: marca,\n      modelo: modelo,\n      stock: stock,\n      id: codigo,\n      ruta: key,\n      disponible: disponible,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    });\n  }))), productSelect.length > 0 ? React.createElement(Button, {\n    className: \"close\",\n    onClick: e => confirmarPedido(),\n    color: \"vk\",\n    circular: true,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }, \"Confirmar \", React.createElement(Icon, {\n    name: \"chevron right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }), React.createElement(Button, {\n    className: \"close\",\n    onClick: e => {\n      setIsclose(!isClose);\n      setProductSelect([]);\n    },\n    color: \"red\",\n    circular: true,\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, \"Salir \"))))) : React.createElement(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  }, React.createElement(Modal, {\n    trigger: React.createElement(Button, {\n      circular: true,\n      color: \"blue\",\n      attached: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Ver articulos actualizados\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119\n    },\n    __self: this\n  }, React.createElement(Modal.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }, \"Elementos actualizados\"), React.createElement(Modal.Content, {\n    scrolling: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121\n    },\n    __self: this\n  }, React.createElement(Modal.Description, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(Table, {\n    singleLine: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(Table.Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(Table.HeaderCell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Producto\"), React.createElement(Table.HeaderCell, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  }, \"Cantidad Anterior\"), React.createElement(Table.HeaderCell, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, \"Cantidad Agregada\"), React.createElement(Table.HeaderCell, {\n    textAlign: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Cantidad Total\"))), React.createElement(Table.Body, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, productSelect.map((item, index) => {\n    const producto = item.producto,\n          stock = item.stock,\n          cantidad = item.cantidad;\n    return React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, React.createElement(Table.Cell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, producto), React.createElement(Table.Cell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    }, stock), React.createElement(Table.Cell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, cantidad), React.createElement(Table.Cell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, Number(stock) + Number(cantidad)));\n  })))))), React.createElement(Button, {\n    onClick: e => {\n      setIsShowingModal(!isShowingModal);\n      setProductSelect([]);\n    },\n    color: \"red\",\n    circular: true,\n    attached: \"right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, \"Eliminar Articulos\"))), React.createElement(Grid.Column, {\n    width: 1,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(Button, {\n    icon: \"upload\",\n    onClick: () => fileInputRef.current.click(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }), React.createElement(\"input\", {\n    ref: fileInputRef,\n    type: \"file\",\n    hidden: true,\n    onChange: getFile,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  })))), React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(Card.Content, {\n    extra: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, React.createElement(TextArea, {\n    name: \"detalle\",\n    placeholder: \"Detalle de la Devolucion\",\n    onChange: e => setDescripcion(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164\n    },\n    __self: this\n  }), React.createElement(Button, {\n    color: \"facebook\",\n    type: \"submit\",\n    size: \"medium\",\n    onClick: handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, \"Agregar\")))));\n}\n\nexport default ActualizarStock;","map":{"version":3,"sources":["/Users/diego/Documents/8_semestre/Taller-de-Aplicaciones/inventarioFablab/src/registro/opciones/actualizar/ActualizaStock.jsx"],"names":["React","useState","useMemo","useEffect","Button","Form","Grid","TextArea","Card","Table","Modal","Header","Icon","Productselect","UserContext","getListaProducto","updateProductoStock","setRegistro","setArchivo","ActualizarStock","file","setFile","nameFile","setNameFile","getFile","e","target","files","name","fileInputRef","createRef","productSelect","setProductSelect","productos","setProductos","isShowingModal","setIsShowingModal","isClose","setIsclose","descripcion","setDescripcion","providerValue","response","console","error","confirmarPedido","evt","length","handleSubmit","map","new_stock","Number","stock","cantidad","new_disponible","disponible","log","ruta","lista","wea","push","marca","modelo","fecha_date","Date","ano","getFullYear","temp_subir","encargado","peticion","fecha","now","comentario","aÃ±o","mes","getMonth","resp","window","location","alert","producto","index","codigo","key","textAlign","item","current","click","value"],"mappings":"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","sourcesContent":["import React, { useState, useMemo, useEffect } from 'react';\nimport { Button, Form, Grid, TextArea, Card, Table, Modal,Header, Icon } from 'semantic-ui-react';\nimport Productselect from './ProductActualizar'\nimport { UserContext } from \"../UseContext\";\nimport { getListaProducto, updateProductoStock, setRegistro, setArchivo } from '../../../firebase';\n\nfunction ActualizarStock() {\n\n    const [file, setFile] = useState(null);\n    const [nameFile, setNameFile] = useState(null);\n\n    const getFile = e => {\n        setFile(e.target.files[0])\n        setNameFile(e.target.files[0].name)\n    }\n\n    const fileInputRef = React.createRef();\n\n    const [productSelect, setProductSelect] = useState([]);\n    \n    const [productos, setProductos] = useState([])\n\n    const [isShowingModal, setIsShowingModal] = useState(true);\n    const [isClose, setIsclose] = useState(false);\n    const [descripcion, setDescripcion] = useState(\"\");\n    const providerValue = useMemo(() => ({ productSelect, setProductSelect }), [productSelect, setProductSelect]);\n\n    useEffect(() => {\n        (async function () {\n            try {\n                getListaProducto((response) => {\n                    setProductos(response);\n                });\n            } catch (e) {\n                console.error(e);\n            }\n        })();// eslint-disable-next-line\n    }, []);\n\n\n\n\n    const confirmarPedido = (evt) => {\n\n        if (productSelect.length > 0) {\n            setIsShowingModal(!isShowingModal);\n            setIsclose(!isClose);\n        }\n    }\n    const handleSubmit = (evt) => {\n\n        if (productSelect.length >= 1) {\n            productSelect.map((productos) => {\n                let new_stock = Number(productos.stock) + Number(productos.cantidad) \n                let new_disponible = Number(productos.disponible) + Number(productos.cantidad)\n                console.log(new_disponible) \n                console.log(new_stock) \n                updateProductoStock(new_stock,new_disponible,productos.ruta)\n            })\n            var lista = []\n            productSelect.map((wea) => {\n                lista.push({marca: wea.marca , modelo: wea.modelo,cantidad: wea.cantidad,stock: wea.stock})\n            })\n            var fecha_date = new Date();\n            var ano = fecha_date.getFullYear();\n            let temp_subir = { encargado: \"Administrador\", peticion: \"Actualizar stock\", lista: lista, fecha: Date.now(), comentario: descripcion, aÃ±o: ano, mes: fecha_date.getMonth() }\n\n            setRegistro(temp_subir, (resp) => {\n                if (resp) {\n                    window.location = '/registro'\n                }\n            })\n        } else {\n            alert(`Error en los datos, todos los datos son obligatorios y debe seleccionar productos obligatoriamente`)\n        }    \n    }\n    return (\n        <UserContext.Provider value={providerValue}>\n            <Card fluid>\n                <Card.Content>\n                    <Grid columns=\"equal\">\n                        <Grid.Column>\n                            {isShowingModal ?\n\n                                < Modal open={isClose} trigger={< Button onClick={e => setIsclose(!isClose)} fluid color=\"youtube\" > Lista de Productos</Button >} size=\"small\" >\n                                    <Modal.Header>Actualizar Stock de Productos</Modal.Header>\n                                    <Modal.Content >\n                                        <Modal.Description>\n                                            <Form>\n                                                <Header>Lista de Productos</Header>\n                                                <Table celled>\n                                                    <Table.Header>\n                                                        <Table.Row>\n                                                            <Table.HeaderCell>Producto  </Table.HeaderCell>\n                                                            <Table.HeaderCell>Articulos Disponibles</Table.HeaderCell>\n                                                            <Table.HeaderCell>Cantidad</Table.HeaderCell>\n                                                            <Table.HeaderCell>Seleccionar</Table.HeaderCell>\n                                                        </Table.Row>\n                                                    </Table.Header>\n                                                    <Table.Body>\n                                                        {productos.map((producto, index) => {\n                                                            const { stock, marca, modelo, codigo, key, disponible } = producto\n                                                            return (\n                                                                <Productselect key={index} marca={marca} modelo={modelo} stock={stock} id={codigo} ruta={key}  disponible={disponible} ></Productselect>\n                                                            )\n                                                        })}\n                                                    </Table.Body>\n                                                </Table>\n                                                {productSelect.length > 0 ? <Button className=\"close\" onClick={e => confirmarPedido()} color=\"vk\" circular type=\"submit\" >\n                                                    Confirmar <Icon name='chevron right' /></Button> : <div />}\n                                                <Button className=\"close\" onClick={e => { setIsclose(!isClose); setProductSelect([]) }} color=\"red\" circular type=\"submit\" >\n                                                    Salir </Button>\n                                            </Form>\n                                        </Modal.Description>\n                                    </Modal.Content>\n                                </Modal >\n                                :\n                                <div style={{ textAlign: \"center\" }} >\n                                    <Modal trigger={<Button circular color=\"blue\" attached='left'>Ver articulos actualizados</Button>} >\n                                        <Modal.Header>Elementos actualizados</Modal.Header>\n                                        <Modal.Content scrolling>\n                                            <Modal.Description>\n                                                <Table singleLine>\n                                                    <Table.Header>\n                                                        <Table.Row>\n                                                            <Table.HeaderCell >Producto</Table.HeaderCell>\n                                                            <Table.HeaderCell textAlign='center'>Cantidad Anterior</Table.HeaderCell>\n                                                            <Table.HeaderCell textAlign='center'>Cantidad Agregada</Table.HeaderCell>\n                                                            <Table.HeaderCell textAlign='center'>Cantidad Total</Table.HeaderCell>\n                                                        </Table.Row>\n                                                    </Table.Header>\n                                                    <Table.Body>\n                                                        {productSelect.map((item, index) => {\n                                                            const { producto, stock, cantidad } = item\n                                                            return (\n                                                                <Table.Row>\n                                                                    <Table.Cell>{producto}</Table.Cell>\n                                                                    <Table.Cell textAlign='center' >{stock}</Table.Cell>\n                                                                    <Table.Cell textAlign='center' >{cantidad}</Table.Cell>\n                                                                    <Table.Cell textAlign='center' >{Number(stock)+Number(cantidad)}</Table.Cell>\n                                                                </Table.Row>\n                                                            )\n                                                        })\n                                                        }\n                                                    </Table.Body>\n                                                </Table>\n                                            </Modal.Description>\n                                        </Modal.Content>\n                                    </Modal>\n                                    <Button onClick={e => { setIsShowingModal(!isShowingModal); setProductSelect([]); }} color=\"red\" circular attached='right'>Eliminar Articulos</Button>\n                                </div>\n                            }\n                        </Grid.Column>\n                        <Grid.Column width={1} >\n                            <Button icon=\"upload\" onClick={() => fileInputRef.current.click()} />\n                            <input ref={fileInputRef} type=\"file\" hidden onChange={getFile} />\n                        </Grid.Column>\n\n                    </Grid>\n\n                </Card.Content>\n                <Form>\n                    <Card.Content extra>\n                        <TextArea name=\"detalle\" placeholder='Detalle de la Devolucion' onChange={e => setDescripcion(e.target.value)} />\n                        <Button color=\"facebook\" type=\"submit\" size=\"medium\" onClick={handleSubmit} >\n                            Agregar\n                        </Button>\n                    </Card.Content>\n                </Form>\n            </Card>\n        </UserContext.Provider>\n    );\n}\nexport default ActualizarStock;"]},"metadata":{},"sourceType":"module"}