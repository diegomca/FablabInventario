{"ast":null,"code":"import React, { memo, useMemo, useCallback, useState, Fragment, useRef, useEffect } from 'react';\nimport { lineCurvePropType, blendModePropType, motionPropTypes, curveFromProp, useValueFormatter, useTheme, useMotionConfig, SmartMotion, getLabelGenerator, DotsItem, withContainer, useDimensions, CartesianMarkers, SvgWrapper, ResponsiveWrapper, getRelativeCursor, isCursorInRect } from '@nivo/core';\nimport { ordinalColorsPropType, useOrdinalColorScale, useInheritedColor } from '@nivo/colors';\nimport { axisPropType, Grid, Axes, renderGridLinesToCanvas, renderAxesToCanvas } from '@nivo/axes';\nimport { LegendPropShape, BoxLegendSvg, renderLegendToCanvas } from '@nivo/legends';\nimport { BasicTooltip, TableTooltip, crosshairPropTypes, useTooltip, Crosshair } from '@nivo/tooltip';\nimport { line, area } from 'd3-shape';\nimport { scalePropType, computeXYScalesForSeries } from '@nivo/scales';\nimport PropTypes from 'prop-types';\nimport { TransitionMotion, spring } from 'react-motion';\nimport { Mesh as Mesh$2, useVoronoiMesh, renderVoronoiToCanvas, renderVoronoiCellToCanvas } from '@nivo/voronoi';\n\nvar LinePointTooltip = function LinePointTooltip(_ref) {\n  var point = _ref.point;\n  return React.createElement(BasicTooltip, {\n    id: React.createElement(\"span\", null, \"x: \", React.createElement(\"strong\", null, point.data.xFormatted), \", y:\", ' ', React.createElement(\"strong\", null, point.data.yFormatted)),\n    enableChip: true,\n    color: point.serieColor\n  });\n};\n\nLinePointTooltip.propTypes = {\n  point: PropTypes.object.isRequired\n};\nvar PointTooltip = memo(LinePointTooltip);\n\nvar Chip = function Chip(_ref) {\n  var color = _ref.color;\n  return React.createElement(\"span\", {\n    style: {\n      display: 'block',\n      width: '12px',\n      height: '12px',\n      background: color\n    }\n  });\n};\n\nChip.propTypes = {\n  color: PropTypes.string.isRequired\n};\n\nvar SliceTooltip = function SliceTooltip(_ref2) {\n  var slice = _ref2.slice,\n      axis = _ref2.axis;\n  var otherAxis = axis === 'x' ? 'y' : 'x';\n  return React.createElement(TableTooltip, {\n    rows: slice.points.map(function (point) {\n      return [React.createElement(Chip, {\n        key: \"chip\",\n        color: point.serieColor\n      }), point.serieId, React.createElement(\"strong\", {\n        key: \"value\"\n      }, point.data[\"\".concat(otherAxis, \"Formatted\")])];\n    })\n  });\n};\n\nSliceTooltip.propTypes = {\n  slice: PropTypes.object.isRequired,\n  axis: PropTypes.oneOf(['x', 'y']).isRequired\n};\nvar SliceTooltip$1 = memo(SliceTooltip);\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar commonPropTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      x: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]),\n      y: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)])\n    })).isRequired\n  })).isRequired,\n  xScale: scalePropType.isRequired,\n  xFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  yScale: scalePropType.isRequired,\n  yFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  layers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(['grid', 'markers', 'axes', 'areas', 'crosshair', 'lines', 'slices', 'points', 'mesh', 'legends']), PropTypes.func])).isRequired,\n  curve: lineCurvePropType.isRequired,\n  axisTop: axisPropType,\n  axisRight: axisPropType,\n  axisBottom: axisPropType,\n  axisLeft: axisPropType,\n  enableGridX: PropTypes.bool.isRequired,\n  enableGridY: PropTypes.bool.isRequired,\n  gridXValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]))]),\n  gridYValues: PropTypes.oneOfType([PropTypes.number, PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]))]),\n  enablePoints: PropTypes.bool.isRequired,\n  pointSymbol: PropTypes.func,\n  pointSize: PropTypes.number.isRequired,\n  pointColor: PropTypes.any.isRequired,\n  pointBorderWidth: PropTypes.number.isRequired,\n  pointBorderColor: PropTypes.any.isRequired,\n  markers: PropTypes.arrayOf(PropTypes.shape({\n    axis: PropTypes.oneOf(['x', 'y']).isRequired,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,\n    style: PropTypes.object\n  })),\n  colors: ordinalColorsPropType.isRequired,\n  enableArea: PropTypes.bool.isRequired,\n  areaOpacity: PropTypes.number.isRequired,\n  areaBlendMode: blendModePropType.isRequired,\n  areaBaselineValue: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n  lineWidth: PropTypes.number.isRequired,\n  defs: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.string.isRequired\n  })).isRequired,\n  legends: PropTypes.arrayOf(PropTypes.shape(LegendPropShape)).isRequired,\n  isInteractive: PropTypes.bool.isRequired,\n  debugMesh: PropTypes.bool.isRequired,\n  tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  tooltipFormat: PropTypes.oneOfType([PropTypes.func, PropTypes.string]),\n  enableSlices: PropTypes.oneOf(['x', 'y', false]).isRequired,\n  debugSlices: PropTypes.bool.isRequired,\n  sliceTooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  enableCrosshair: PropTypes.bool.isRequired,\n  crosshairType: crosshairPropTypes.type.isRequired\n};\n\nvar LinePropTypes = _objectSpread({}, commonPropTypes, {\n  enablePointLabel: PropTypes.bool.isRequired,\n  useMesh: PropTypes.bool.isRequired\n}, motionPropTypes);\n\nvar LineCanvasPropTypes = _objectSpread({\n  pixelRatio: PropTypes.number.isRequired\n}, commonPropTypes);\n\nvar commonDefaultProps = {\n  curve: 'linear',\n  xScale: {\n    type: 'point'\n  },\n  yScale: {\n    type: 'linear',\n    min: 0,\n    max: 'auto'\n  },\n  layers: ['grid', 'markers', 'axes', 'areas', 'crosshair', 'lines', 'points', 'slices', 'mesh', 'legends'],\n  axisBottom: {},\n  axisLeft: {},\n  enableGridX: true,\n  enableGridY: true,\n  enablePoints: true,\n  pointSize: 6,\n  pointColor: {\n    from: 'color'\n  },\n  pointBorderWidth: 0,\n  pointBorderColor: {\n    theme: 'background'\n  },\n  colors: {\n    scheme: 'nivo'\n  },\n  enableArea: false,\n  areaBaselineValue: 0,\n  areaOpacity: 0.2,\n  areaBlendMode: 'normal',\n  lineWidth: 2,\n  defs: [],\n  legends: [],\n  isInteractive: true,\n  tooltip: PointTooltip,\n  enableSlices: false,\n  debugSlices: false,\n  sliceTooltip: SliceTooltip$1,\n  debugMesh: false,\n  enableCrosshair: true,\n  crosshairType: 'bottom-left'\n};\n\nvar LineDefaultProps = _objectSpread({}, commonDefaultProps, {\n  enablePointLabel: false,\n  useMesh: false,\n  animate: true,\n  motionStiffness: 90,\n  motionDamping: 15\n});\n\nvar LineCanvasDefaultProps = _objectSpread({}, commonDefaultProps, {\n  pixelRatio: global.window && global.window.devicePixelRatio ? global.window.devicePixelRatio : 1\n});\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty$1(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty$1(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}\n\nfunction _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}\n\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}\n\nvar useLineGenerator = function useLineGenerator(_ref) {\n  var curve = _ref.curve;\n  return useMemo(function () {\n    return line().defined(function (d) {\n      return d.x !== null && d.y !== null;\n    }).x(function (d) {\n      return d.x;\n    }).y(function (d) {\n      return d.y;\n    }).curve(curveFromProp(curve));\n  }, [curve]);\n};\n\nvar useAreaGenerator = function useAreaGenerator(_ref2) {\n  var curve = _ref2.curve,\n      yScale = _ref2.yScale,\n      areaBaselineValue = _ref2.areaBaselineValue;\n  return useMemo(function () {\n    return area().defined(function (d) {\n      return d.x !== null && d.y !== null;\n    }).x(function (d) {\n      return d.x;\n    }).y1(function (d) {\n      return d.y;\n    }).curve(curveFromProp(curve)).y0(yScale(areaBaselineValue));\n  }, [curve, yScale, areaBaselineValue]);\n};\n\nvar usePoints = function usePoints(_ref3) {\n  var series = _ref3.series,\n      getPointColor = _ref3.getPointColor,\n      getPointBorderColor = _ref3.getPointBorderColor,\n      formatX = _ref3.formatX,\n      formatY = _ref3.formatY;\n  return useMemo(function () {\n    return series.reduce(function (acc, serie) {\n      return [].concat(_toConsumableArray(acc), _toConsumableArray(serie.data.filter(function (datum) {\n        return datum.position.x !== null && datum.position.y !== null;\n      }).map(function (datum, i) {\n        var point = {\n          id: \"\".concat(serie.id, \".\").concat(i),\n          index: acc.length + i,\n          serieId: serie.id,\n          serieColor: serie.color,\n          x: datum.position.x,\n          y: datum.position.y\n        };\n        point.color = getPointColor(serie);\n        point.borderColor = getPointBorderColor(point);\n        point.data = _objectSpread$1({}, datum.data, {\n          xFormatted: formatX(datum.data.x),\n          yFormatted: formatY(datum.data.y)\n        });\n        return point;\n      })));\n    }, []);\n  }, [series, getPointColor, getPointBorderColor, formatX, formatY]);\n};\n\nvar useSlices = function useSlices(_ref4) {\n  var enableSlices = _ref4.enableSlices,\n      points = _ref4.points,\n      width = _ref4.width,\n      height = _ref4.height;\n  return useMemo(function () {\n    if (enableSlices === false) return [];\n\n    if (enableSlices === 'x') {\n      var map = new Map();\n      points.forEach(function (point) {\n        if (point.data.x === null || point.data.y === null) return;\n        if (!map.has(point.x)) map.set(point.x, [point]);else map.get(point.x).push(point);\n      });\n      return Array.from(map.entries()).sort(function (a, b) {\n        return a[0] - b[0];\n      }).map(function (_ref5, i, slices) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n            x = _ref6[0],\n            slicePoints = _ref6[1];\n\n        var prevSlice = slices[i - 1];\n        var nextSlice = slices[i + 1];\n        var x0;\n        if (!prevSlice) x0 = x;else x0 = x - (x - prevSlice[0]) / 2;\n        var sliceWidth;\n        if (!nextSlice) sliceWidth = width - x0;else sliceWidth = x - x0 + (nextSlice[0] - x) / 2;\n        return {\n          id: x,\n          x0: x0,\n          x: x,\n          y0: 0,\n          y: 0,\n          width: sliceWidth,\n          height: height,\n          points: slicePoints.reverse()\n        };\n      });\n    } else if (enableSlices === 'y') {\n      var _map = new Map();\n\n      points.forEach(function (point) {\n        if (point.data.x === null || point.data.y === null) return;\n        if (!_map.has(point.y)) _map.set(point.y, [point]);else _map.get(point.y).push(point);\n      });\n      return Array.from(_map.entries()).sort(function (a, b) {\n        return a[0] - b[0];\n      }).map(function (_ref7, i, slices) {\n        var _ref8 = _slicedToArray(_ref7, 2),\n            y = _ref8[0],\n            slicePoints = _ref8[1];\n\n        var prevSlice = slices[i - 1];\n        var nextSlice = slices[i + 1];\n        var y0;\n        if (!prevSlice) y0 = y;else y0 = y - (y - prevSlice[0]) / 2;\n        var sliceHeight;\n        if (!nextSlice) sliceHeight = height - y0;else sliceHeight = y - y0 + (nextSlice[0] - y) / 2;\n        return {\n          id: y,\n          x0: 0,\n          x: 0,\n          y0: y0,\n          y: y,\n          width: width,\n          height: sliceHeight,\n          points: slicePoints.reverse()\n        };\n      });\n    }\n  }, [enableSlices, points]);\n};\n\nvar useLine = function useLine(_ref9) {\n  var data = _ref9.data,\n      _ref9$xScale = _ref9.xScale,\n      xScaleSpec = _ref9$xScale === void 0 ? LineDefaultProps.xScale : _ref9$xScale,\n      xFormat = _ref9.xFormat,\n      _ref9$yScale = _ref9.yScale,\n      yScaleSpec = _ref9$yScale === void 0 ? LineDefaultProps.yScale : _ref9$yScale,\n      yFormat = _ref9.yFormat,\n      width = _ref9.width,\n      height = _ref9.height,\n      _ref9$colors = _ref9.colors,\n      colors = _ref9$colors === void 0 ? LineDefaultProps.colors : _ref9$colors,\n      _ref9$curve = _ref9.curve,\n      curve = _ref9$curve === void 0 ? LineDefaultProps.curve : _ref9$curve,\n      _ref9$areaBaselineVal = _ref9.areaBaselineValue,\n      areaBaselineValue = _ref9$areaBaselineVal === void 0 ? LineDefaultProps.areaBaselineValue : _ref9$areaBaselineVal,\n      _ref9$pointColor = _ref9.pointColor,\n      pointColor = _ref9$pointColor === void 0 ? LineDefaultProps.pointColor : _ref9$pointColor,\n      _ref9$pointBorderColo = _ref9.pointBorderColor,\n      pointBorderColor = _ref9$pointBorderColo === void 0 ? LineDefaultProps.pointBorderColor : _ref9$pointBorderColo,\n      _ref9$enableSlices = _ref9.enableSlices,\n      enableSlices = _ref9$enableSlices === void 0 ? LineDefaultProps.enableSlicesTooltip : _ref9$enableSlices;\n  var formatX = useValueFormatter(xFormat);\n  var formatY = useValueFormatter(yFormat);\n  var getColor = useOrdinalColorScale(colors, 'id');\n  var theme = useTheme();\n  var getPointColor = useInheritedColor(pointColor, theme);\n  var getPointBorderColor = useInheritedColor(pointBorderColor, theme);\n\n  var _useMemo = useMemo(function () {\n    return computeXYScalesForSeries(data, xScaleSpec, yScaleSpec, width, height);\n  }, [data, xScaleSpec, yScaleSpec, width, height]),\n      xScale = _useMemo.xScale,\n      yScale = _useMemo.yScale,\n      rawSeries = _useMemo.series;\n\n  var series = useMemo(function () {\n    return rawSeries.map(function (serie) {\n      return _objectSpread$1({}, serie, {\n        color: getColor(serie)\n      });\n    });\n  }, [rawSeries, getColor]);\n  var points = usePoints({\n    series: series,\n    getPointColor: getPointColor,\n    getPointBorderColor: getPointBorderColor,\n    formatX: formatX,\n    formatY: formatY\n  });\n  var slices = useSlices({\n    enableSlices: enableSlices,\n    points: points,\n    width: width,\n    height: height\n  });\n  var lineGenerator = useLineGenerator({\n    curve: curve\n  });\n  var areaGenerator = useAreaGenerator({\n    curve: curve,\n    yScale: yScale,\n    areaBaselineValue: areaBaselineValue\n  });\n  return {\n    lineGenerator: lineGenerator,\n    areaGenerator: areaGenerator,\n    getColor: getColor,\n    series: series,\n    xScale: xScale,\n    yScale: yScale,\n    slices: slices,\n    points: points\n  };\n};\n\nvar Areas = function Areas(_ref) {\n  var areaGenerator = _ref.areaGenerator,\n      areaOpacity = _ref.areaOpacity,\n      areaBlendMode = _ref.areaBlendMode,\n      lines = _ref.lines;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.springConfig;\n\n  if (animate !== true) {\n    return React.createElement(\"g\", null, lines.slice(0).reverse().map(function (_ref2) {\n      var id = _ref2.id,\n          data = _ref2.data,\n          areaColor = _ref2.color;\n      return React.createElement(\"path\", {\n        key: id,\n        d: areaGenerator(data.map(function (d) {\n          return d.position;\n        })),\n        fill: areaColor,\n        fillOpacity: areaOpacity,\n        strokeWidth: 0,\n        style: {\n          mixBlendMode: areaBlendMode\n        }\n      });\n    }));\n  }\n\n  return React.createElement(\"g\", null, lines.slice(0).reverse().map(function (_ref3) {\n    var id = _ref3.id,\n        data = _ref3.data,\n        areaColor = _ref3.color;\n    return React.createElement(SmartMotion, {\n      key: id,\n      style: function style(spring) {\n        return {\n          d: spring(areaGenerator(data.map(function (d) {\n            return d.position;\n          })), springConfig),\n          fill: spring(areaColor, springConfig)\n        };\n      }\n    }, function (style) {\n      return React.createElement(\"path\", {\n        key: id,\n        d: style.d,\n        fill: areaColor,\n        fillOpacity: areaOpacity,\n        strokeWidth: 0,\n        style: {\n          mixBlendMode: areaBlendMode\n        }\n      });\n    });\n  }));\n};\n\nAreas.propTypes = {\n  areaGenerator: PropTypes.func.isRequired,\n  areaOpacity: PropTypes.number.isRequired,\n  areaBlendMode: blendModePropType.isRequired,\n  lines: PropTypes.arrayOf(PropTypes.object).isRequired\n};\nvar Areas$1 = memo(Areas);\n\nvar LinesItem = function LinesItem(_ref) {\n  var lineGenerator = _ref.lineGenerator,\n      id = _ref.id,\n      points = _ref.points,\n      color = _ref.color,\n      thickness = _ref.thickness;\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.springConfig;\n\n  if (animate !== true) {\n    return React.createElement(\"path\", {\n      key: id,\n      d: lineGenerator(points),\n      fill: \"none\",\n      strokeWidth: thickness,\n      stroke: color\n    });\n  }\n\n  return React.createElement(SmartMotion, {\n    key: id,\n    style: function style(spring) {\n      return {\n        d: spring(lineGenerator(points), springConfig),\n        stroke: spring(color, springConfig)\n      };\n    }\n  }, function (style) {\n    return React.createElement(\"path\", {\n      key: id,\n      d: style.d,\n      fill: \"none\",\n      strokeWidth: thickness,\n      stroke: style.stroke\n    });\n  });\n};\n\nLinesItem.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n  points: PropTypes.arrayOf(PropTypes.shape({\n    x: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n    y: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n  })),\n  lineGenerator: PropTypes.func.isRequired,\n  color: PropTypes.string.isRequired,\n  thickness: PropTypes.number.isRequired\n};\nvar LinesItem$1 = memo(LinesItem);\n\nvar Lines = function Lines(_ref) {\n  var lines = _ref.lines,\n      lineGenerator = _ref.lineGenerator,\n      lineWidth = _ref.lineWidth;\n  return lines.map(function (_ref2) {\n    var id = _ref2.id,\n        data = _ref2.data,\n        color = _ref2.color;\n    return React.createElement(LinesItem$1, {\n      key: id,\n      id: id,\n      points: data.map(function (d) {\n        return d.position;\n      }),\n      lineGenerator: lineGenerator,\n      color: color,\n      thickness: lineWidth\n    });\n  });\n};\n\nLines.propTypes = {\n  lines: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    color: PropTypes.string.isRequired,\n    data: PropTypes.arrayOf(PropTypes.shape({\n      data: PropTypes.shape({\n        x: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)]),\n        y: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.instanceOf(Date)])\n      }).isRequired,\n      position: PropTypes.shape({\n        x: PropTypes.number,\n        y: PropTypes.number\n      }).isRequired\n    })).isRequired\n  })).isRequired,\n  lineWidth: PropTypes.number.isRequired,\n  lineGenerator: PropTypes.func.isRequired\n};\nvar Lines$1 = memo(Lines);\n\nvar SlicesItem = function SlicesItem(_ref) {\n  var slice = _ref.slice,\n      axis = _ref.axis,\n      debug = _ref.debug,\n      tooltip = _ref.tooltip,\n      isCurrent = _ref.isCurrent,\n      setCurrent = _ref.setCurrent;\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (event) {\n    showTooltipFromEvent(React.createElement(tooltip, {\n      slice: slice,\n      axis: axis\n    }), event, 'right');\n    setCurrent(slice);\n  }, [showTooltipFromEvent, tooltip, slice]);\n  var handleMouseMove = useCallback(function (event) {\n    showTooltipFromEvent(React.createElement(tooltip, {\n      slice: slice,\n      axis: axis\n    }), event, 'right');\n  }, [showTooltipFromEvent, tooltip, slice]);\n  var handleMouseLeave = useCallback(function () {\n    hideTooltip();\n    setCurrent(null);\n  }, [hideTooltip]);\n  return React.createElement(\"rect\", {\n    x: slice.x0,\n    y: slice.y0,\n    width: slice.width,\n    height: slice.height,\n    stroke: \"red\",\n    strokeWidth: debug ? 1 : 0,\n    strokeOpacity: 0.75,\n    fill: \"red\",\n    fillOpacity: isCurrent && debug ? 0.35 : 0,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave\n  });\n};\n\nSlicesItem.propTypes = {\n  slice: PropTypes.object.isRequired,\n  axis: PropTypes.oneOf(['x', 'y']).isRequired,\n  debug: PropTypes.bool.isRequired,\n  height: PropTypes.number.isRequired,\n  tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]),\n  isCurrent: PropTypes.bool.isRequired,\n  setCurrent: PropTypes.func.isRequired\n};\nvar SlicesItem$1 = memo(SlicesItem);\n\nvar Slices = function Slices(_ref) {\n  var slices = _ref.slices,\n      axis = _ref.axis,\n      debug = _ref.debug,\n      height = _ref.height,\n      tooltip = _ref.tooltip,\n      current = _ref.current,\n      setCurrent = _ref.setCurrent;\n  return slices.map(function (slice) {\n    return React.createElement(SlicesItem$1, {\n      key: slice.id,\n      slice: slice,\n      axis: axis,\n      debug: debug,\n      height: height,\n      tooltip: tooltip,\n      setCurrent: setCurrent,\n      isCurrent: current !== null && current.id === slice.id\n    });\n  });\n};\n\nSlices.propTypes = {\n  slices: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.number, PropTypes.string, PropTypes.instanceOf(Date)]).isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired,\n    points: PropTypes.arrayOf(PropTypes.object).isRequired\n  })).isRequired,\n  axis: PropTypes.oneOf(['x', 'y']).isRequired,\n  debug: PropTypes.bool.isRequired,\n  height: PropTypes.number.isRequired,\n  tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  current: PropTypes.object,\n  setCurrent: PropTypes.func.isRequired\n};\nvar Slices$1 = memo(Slices);\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar Points = function Points(_ref) {\n  var points = _ref.points,\n      symbol = _ref.symbol,\n      size = _ref.size,\n      borderWidth = _ref.borderWidth,\n      enableLabel = _ref.enableLabel,\n      label = _ref.label,\n      labelYOffset = _ref.labelYOffset;\n  var theme = useTheme();\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.springConfig;\n\n  var getLabel = getLabelGenerator(label);\n  var mappedPoints = points.map(function (point) {\n    var mappedPoint = {\n      id: point.id,\n      x: point.x,\n      y: point.y,\n      datum: point.data,\n      fill: point.color,\n      stroke: point.borderColor,\n      label: enableLabel ? getLabel(point.data) : null\n    };\n    return mappedPoint;\n  });\n\n  if (animate !== true) {\n    return React.createElement(\"g\", null, mappedPoints.map(function (point) {\n      return React.createElement(DotsItem, {\n        key: point.id,\n        x: point.x,\n        y: point.y,\n        datum: point.datum,\n        symbol: symbol,\n        size: size,\n        color: point.fill,\n        borderWidth: borderWidth,\n        borderColor: point.stroke,\n        label: point.label,\n        labelYOffset: labelYOffset,\n        theme: theme\n      });\n    }));\n  }\n\n  return React.createElement(TransitionMotion, {\n    styles: mappedPoints.map(function (point) {\n      return {\n        key: point.id,\n        data: point,\n        style: {\n          x: spring(point.x, springConfig),\n          y: spring(point.y, springConfig),\n          size: spring(size, springConfig)\n        }\n      };\n    })\n  }, function (interpolatedStyles) {\n    return React.createElement(\"g\", null, interpolatedStyles.map(function (_ref2) {\n      var key = _ref2.key,\n          style = _ref2.style,\n          point = _ref2.data;\n      return React.createElement(DotsItem, _extends({\n        key: key\n      }, style, {\n        symbol: symbol,\n        datum: point.datum,\n        color: point.fill,\n        borderWidth: borderWidth,\n        borderColor: point.stroke,\n        label: point.label,\n        labelYOffset: labelYOffset,\n        theme: theme\n      }));\n    }));\n  });\n};\n\nPoints.propTypes = {\n  points: PropTypes.arrayOf(PropTypes.object),\n  symbol: PropTypes.func,\n  size: PropTypes.number.isRequired,\n  color: PropTypes.func.isRequired,\n  borderWidth: PropTypes.number.isRequired,\n  borderColor: PropTypes.func.isRequired,\n  enableLabel: PropTypes.bool.isRequired,\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.func]).isRequired,\n  labelYOffset: PropTypes.number\n};\nPoints.defaultProps = {\n  enableLabel: false,\n  label: 'yFormatted'\n};\nvar Points$1 = memo(Points);\n\nvar Mesh = function Mesh(_ref) {\n  var points = _ref.points,\n      width = _ref.width,\n      height = _ref.height,\n      margin = _ref.margin,\n      setCurrent = _ref.setCurrent,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip,\n      debug = _ref.debug;\n\n  var _useTooltip = useTooltip(),\n      showTooltipAt = _useTooltip.showTooltipAt,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseEnter = useCallback(function (point, event) {\n    showTooltipAt(React.createElement(tooltip, {\n      point: point\n    }), [point.x + margin.left, point.y + margin.top], 'top');\n    setCurrent(point);\n    onMouseEnter && onMouseEnter(point, event);\n  }, [setCurrent, showTooltipAt, tooltip, onMouseEnter, margin]);\n  var handleMouseMove = useCallback(function (point, event) {\n    showTooltipAt(React.createElement(tooltip, {\n      point: point\n    }), [point.x + margin.left, point.y + margin.top], 'top');\n    setCurrent(point);\n    onMouseMove && onMouseMove(point, event);\n  }, [setCurrent, showTooltipAt, tooltip, onMouseMove]);\n  var handleMouseLeave = useCallback(function () {\n    hideTooltip();\n    setCurrent(null);\n  }, [hideTooltip, setCurrent]);\n  var handleClick = useCallback(function (point, event) {\n    onClick && onClick(point, event);\n  }, [onClick]);\n  return React.createElement(Mesh$2, {\n    nodes: points,\n    width: width,\n    height: height,\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick,\n    debug: debug\n  });\n};\n\nMesh.propTypes = {\n  points: PropTypes.arrayOf(PropTypes.object).isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  margin: PropTypes.object.isRequired,\n  setCurrent: PropTypes.func.isRequired,\n  onMouseEnter: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onClick: PropTypes.func,\n  tooltip: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  debug: PropTypes.bool.isRequired\n};\nvar Mesh$1 = memo(Mesh);\n\nfunction _objectSpread$2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty$2(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty$2(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _extends$1() {\n  _extends$1 = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends$1.apply(this, arguments);\n}\n\nfunction _slicedToArray$1(arr, i) {\n  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _nonIterableRest$1();\n}\n\nfunction _nonIterableRest$1() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit$1(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles$1(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar Line = function Line(props) {\n  var data = props.data,\n      xScaleSpec = props.xScale,\n      xFormat = props.xFormat,\n      yScaleSpec = props.yScale,\n      yFormat = props.yFormat,\n      layers = props.layers,\n      curve = props.curve,\n      areaBaselineValue = props.areaBaselineValue,\n      colors = props.colors,\n      partialMargin = props.margin,\n      width = props.width,\n      height = props.height,\n      axisTop = props.axisTop,\n      axisRight = props.axisRight,\n      axisBottom = props.axisBottom,\n      axisLeft = props.axisLeft,\n      enableGridX = props.enableGridX,\n      enableGridY = props.enableGridY,\n      gridXValues = props.gridXValues,\n      gridYValues = props.gridYValues,\n      lineWidth = props.lineWidth,\n      enableArea = props.enableArea,\n      areaOpacity = props.areaOpacity,\n      areaBlendMode = props.areaBlendMode,\n      enablePoints = props.enablePoints,\n      pointSymbol = props.pointSymbol,\n      pointSize = props.pointSize,\n      pointColor = props.pointColor,\n      pointBorderWidth = props.pointBorderWidth,\n      pointBorderColor = props.pointBorderColor,\n      enablePointLabel = props.enablePointLabel,\n      pointLabel = props.pointLabel,\n      pointLabelFormat = props.pointLabelFormat,\n      pointLabelYOffset = props.pointLabelYOffset,\n      markers = props.markers,\n      legends = props.legends,\n      isInteractive = props.isInteractive,\n      useMesh = props.useMesh,\n      debugMesh = props.debugMesh,\n      onMouseEnter = props.onMouseEnter,\n      onMouseMove = props.onMouseMove,\n      onMouseLeave = props.onMouseLeave,\n      onClick = props.onClick,\n      tooltip = props.tooltip,\n      enableSlices = props.enableSlices,\n      debugSlices = props.debugSlices,\n      sliceTooltip = props.sliceTooltip,\n      enableCrosshair = props.enableCrosshair,\n      crosshairType = props.crosshairType;\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var _useLine = useLine({\n    data: data,\n    xScale: xScaleSpec,\n    xFormat: xFormat,\n    yScale: yScaleSpec,\n    yFormat: yFormat,\n    width: innerWidth,\n    height: innerHeight,\n    colors: colors,\n    curve: curve,\n    areaBaselineValue: areaBaselineValue,\n    pointColor: pointColor,\n    pointBorderColor: pointBorderColor,\n    enableSlices: enableSlices\n  }),\n      lineGenerator = _useLine.lineGenerator,\n      areaGenerator = _useLine.areaGenerator,\n      series = _useLine.series,\n      xScale = _useLine.xScale,\n      yScale = _useLine.yScale,\n      slices = _useLine.slices,\n      points = _useLine.points;\n\n  var theme = useTheme();\n  var getPointColor = useInheritedColor(pointColor, theme);\n  var getPointBorderColor = useInheritedColor(pointBorderColor, theme);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray$1(_useState, 2),\n      currentPoint = _useState2[0],\n      setCurrentPoint = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray$1(_useState3, 2),\n      currentSlice = _useState4[0],\n      setCurrentSlice = _useState4[1];\n\n  var legendData = useMemo(function () {\n    return series.map(function (line) {\n      return {\n        id: line.id,\n        label: line.id,\n        color: line.color\n      };\n    }).reverse();\n  }, [series]);\n  var layerById = {\n    grid: React.createElement(Grid, {\n      key: \"grid\",\n      theme: theme,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: enableGridX ? xScale : null,\n      yScale: enableGridY ? yScale : null,\n      xValues: gridXValues,\n      yValues: gridYValues\n    }),\n    markers: React.createElement(CartesianMarkers, {\n      key: \"markers\",\n      markers: markers,\n      width: innerWidth,\n      height: innerHeight,\n      xScale: xScale,\n      yScale: yScale,\n      theme: theme\n    }),\n    axes: React.createElement(Axes, {\n      key: \"axes\",\n      xScale: xScale,\n      yScale: yScale,\n      width: innerWidth,\n      height: innerHeight,\n      theme: theme,\n      top: axisTop,\n      right: axisRight,\n      bottom: axisBottom,\n      left: axisLeft\n    }),\n    areas: null,\n    lines: React.createElement(Lines$1, {\n      key: \"lines\",\n      lines: series,\n      lineGenerator: lineGenerator,\n      lineWidth: lineWidth\n    }),\n    slices: null,\n    points: null,\n    crosshair: null,\n    mesh: null,\n    legends: legends.map(function (legend, i) {\n      return React.createElement(BoxLegendSvg, _extends$1({\n        key: \"legend.\".concat(i)\n      }, legend, {\n        containerWidth: innerWidth,\n        containerHeight: innerHeight,\n        data: legend.data || legendData,\n        theme: theme\n      }));\n    })\n  };\n\n  if (enableArea) {\n    layerById.areas = React.createElement(Areas$1, {\n      key: \"areas\",\n      areaGenerator: areaGenerator,\n      areaOpacity: areaOpacity,\n      areaBlendMode: areaBlendMode,\n      lines: series\n    });\n  }\n\n  if (isInteractive && enableSlices !== false) {\n    layerById.slices = React.createElement(Slices$1, {\n      key: \"slices\",\n      slices: slices,\n      axis: enableSlices,\n      debug: debugSlices,\n      height: innerHeight,\n      tooltip: sliceTooltip,\n      current: currentSlice,\n      setCurrent: setCurrentSlice\n    });\n  }\n\n  if (enablePoints) {\n    layerById.points = React.createElement(Points$1, {\n      key: \"points\",\n      points: points,\n      symbol: pointSymbol,\n      size: pointSize,\n      color: getPointColor,\n      borderWidth: pointBorderWidth,\n      borderColor: getPointBorderColor,\n      enableLabel: enablePointLabel,\n      label: pointLabel,\n      labelFormat: pointLabelFormat,\n      labelYOffset: pointLabelYOffset\n    });\n  }\n\n  if (isInteractive && enableCrosshair) {\n    if (currentPoint !== null) {\n      layerById.crosshair = React.createElement(Crosshair, {\n        key: \"crosshair\",\n        width: innerWidth,\n        height: innerHeight,\n        x: currentPoint.x,\n        y: currentPoint.y,\n        type: crosshairType\n      });\n    }\n\n    if (currentSlice !== null) {\n      layerById.crosshair = React.createElement(Crosshair, {\n        key: \"crosshair\",\n        width: innerWidth,\n        height: innerHeight,\n        x: currentSlice.x,\n        y: currentSlice.y,\n        type: enableSlices\n      });\n    }\n  }\n\n  if (isInteractive && useMesh && enableSlices === false) {\n    layerById.mesh = React.createElement(Mesh$1, {\n      key: \"mesh\",\n      points: points,\n      width: innerWidth,\n      height: innerHeight,\n      margin: margin,\n      current: currentPoint,\n      setCurrent: setCurrentPoint,\n      onMouseEnter: onMouseEnter,\n      onMouseMove: onMouseMove,\n      onMouseLeave: onMouseLeave,\n      onClick: onClick,\n      tooltip: tooltip,\n      debug: debugMesh\n    });\n  }\n\n  return React.createElement(SvgWrapper, {\n    width: outerWidth,\n    height: outerHeight,\n    margin: margin\n  }, layers.map(function (layer, i) {\n    if (typeof layer === 'function') {\n      return React.createElement(Fragment, {\n        key: i\n      }, layer(_objectSpread$2({}, props, {\n        innerWidth: innerWidth,\n        innerHeight: innerHeight,\n        series: series,\n        slices: slices,\n        points: points,\n        xScale: xScale,\n        yScale: yScale,\n        lineGenerator: lineGenerator,\n        areaGenerator: areaGenerator\n      })));\n    }\n\n    return layerById[layer];\n  }));\n};\n\nLine.propTypes = LinePropTypes;\nLine.defaultProps = LineDefaultProps;\nvar Line$1 = withContainer(Line);\n\nfunction _extends$2() {\n  _extends$2 = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends$2.apply(this, arguments);\n}\n\nvar ResponsiveLine = function ResponsiveLine(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(Line$1, _extends$2({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nfunction _objectSpread$3(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    var ownKeys = Object.keys(source);\n\n    if (typeof Object.getOwnPropertySymbols === 'function') {\n      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(source, sym).enumerable;\n      }));\n    }\n\n    ownKeys.forEach(function (key) {\n      _defineProperty$3(target, key, source[key]);\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty$3(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _slicedToArray$2(arr, i) {\n  return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _nonIterableRest$2();\n}\n\nfunction _nonIterableRest$2() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit$2(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles$2(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar LineCanvas = function LineCanvas(_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      partialMargin = _ref.margin,\n      pixelRatio = _ref.pixelRatio,\n      data = _ref.data,\n      xScaleSpec = _ref.xScale,\n      yScaleSpec = _ref.yScale,\n      curve = _ref.curve,\n      layers = _ref.layers,\n      colors = _ref.colors,\n      lineWidth = _ref.lineWidth,\n      enableArea = _ref.enableArea,\n      areaBaselineValue = _ref.areaBaselineValue,\n      areaOpacity = _ref.areaOpacity,\n      enablePoints = _ref.enablePoints,\n      pointSize = _ref.pointSize,\n      pointColor = _ref.pointColor,\n      pointBorderWidth = _ref.pointBorderWidth,\n      pointBorderColor = _ref.pointBorderColor,\n      enableGridX = _ref.enableGridX,\n      gridXValues = _ref.gridXValues,\n      enableGridY = _ref.enableGridY,\n      gridYValues = _ref.gridYValues,\n      axisTop = _ref.axisTop,\n      axisRight = _ref.axisRight,\n      axisBottom = _ref.axisBottom,\n      axisLeft = _ref.axisLeft,\n      legends = _ref.legends,\n      isInteractive = _ref.isInteractive,\n      debugMesh = _ref.debugMesh,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick,\n      tooltip = _ref.tooltip;\n  var canvasEl = useRef(null);\n\n  var _useDimensions = useDimensions(width, height, partialMargin),\n      margin = _useDimensions.margin,\n      innerWidth = _useDimensions.innerWidth,\n      innerHeight = _useDimensions.innerHeight,\n      outerWidth = _useDimensions.outerWidth,\n      outerHeight = _useDimensions.outerHeight;\n\n  var theme = useTheme();\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray$2(_useState, 2),\n      currentPoint = _useState2[0],\n      setCurrentPoint = _useState2[1];\n\n  var _useLine = useLine({\n    data: data,\n    xScale: xScaleSpec,\n    yScale: yScaleSpec,\n    width: innerWidth,\n    height: innerHeight,\n    colors: colors,\n    curve: curve,\n    areaBaselineValue: areaBaselineValue,\n    pointColor: pointColor,\n    pointBorderColor: pointBorderColor\n  }),\n      lineGenerator = _useLine.lineGenerator,\n      areaGenerator = _useLine.areaGenerator,\n      series = _useLine.series,\n      xScale = _useLine.xScale,\n      yScale = _useLine.yScale,\n      points = _useLine.points;\n\n  var _useVoronoiMesh = useVoronoiMesh({\n    points: points,\n    width: innerWidth,\n    height: innerHeight,\n    debug: debugMesh\n  }),\n      delaunay = _useVoronoiMesh.delaunay,\n      voronoi = _useVoronoiMesh.voronoi;\n\n  useEffect(function () {\n    canvasEl.current.width = outerWidth * pixelRatio;\n    canvasEl.current.height = outerHeight * pixelRatio;\n    var ctx = canvasEl.current.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.fillStyle = theme.background;\n    ctx.fillRect(0, 0, outerWidth, outerHeight);\n    ctx.translate(margin.left, margin.top);\n    layers.forEach(function (layer) {\n      if (layer === 'grid' && theme.grid.line.strokeWidth > 0) {\n        ctx.lineWidth = theme.grid.line.strokeWidth;\n        ctx.strokeStyle = theme.grid.line.stroke;\n        enableGridX && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: xScale,\n          axis: 'x',\n          values: gridXValues\n        });\n        enableGridY && renderGridLinesToCanvas(ctx, {\n          width: innerWidth,\n          height: innerHeight,\n          scale: yScale,\n          axis: 'y',\n          values: gridYValues\n        });\n      }\n\n      if (layer === 'axes') {\n        renderAxesToCanvas(ctx, {\n          xScale: xScale,\n          yScale: yScale,\n          width: innerWidth,\n          height: innerHeight,\n          top: axisTop,\n          right: axisRight,\n          bottom: axisBottom,\n          left: axisLeft,\n          theme: theme\n        });\n      }\n\n      if (layer === 'areas' && enableArea === true) {\n        ctx.save();\n        ctx.globalAlpha = areaOpacity;\n        areaGenerator.context(ctx);\n        series.forEach(function (serie) {\n          ctx.fillStyle = serie.color;\n          ctx.beginPath();\n          areaGenerator(serie.data.map(function (d) {\n            return d.position;\n          }));\n          ctx.fill();\n        });\n        ctx.restore();\n      }\n\n      if (layer === 'lines') {\n        lineGenerator.context(ctx);\n        series.forEach(function (serie) {\n          ctx.strokeStyle = serie.color;\n          ctx.lineWidth = lineWidth;\n          ctx.beginPath();\n          lineGenerator(serie.data.map(function (d) {\n            return d.position;\n          }));\n          ctx.stroke();\n        });\n      }\n\n      if (layer === 'points' && enablePoints === true && pointSize > 0) {\n        points.forEach(function (point) {\n          ctx.fillStyle = point.color;\n          ctx.beginPath();\n          ctx.arc(point.x, point.y, pointSize / 2, 0, 2 * Math.PI);\n          ctx.fill();\n\n          if (pointBorderWidth > 0) {\n            ctx.strokeStyle = point.borderColor;\n            ctx.lineWidth = pointBorderWidth;\n            ctx.stroke();\n          }\n        });\n      }\n\n      if (layer === 'mesh' && debugMesh === true) {\n        renderVoronoiToCanvas(ctx, voronoi);\n\n        if (currentPoint) {\n          renderVoronoiCellToCanvas(ctx, voronoi, currentPoint.index);\n        }\n      }\n\n      if (layer === 'legends') {\n        var legendData = series.map(function (serie) {\n          return {\n            id: serie.id,\n            label: serie.id,\n            color: serie.color\n          };\n        }).reverse();\n        legends.forEach(function (legend) {\n          renderLegendToCanvas(ctx, _objectSpread$3({}, legend, {\n            data: legend.data || legendData,\n            containerWidth: innerWidth,\n            containerHeight: innerHeight,\n            theme: theme\n          }));\n        });\n      }\n    });\n  }, [canvasEl, outerWidth, outerHeight, layers, theme, lineGenerator, series, xScale, yScale, enableGridX, gridXValues, enableGridY, gridYValues, axisTop, axisRight, axisBottom, axisLeft, legends, points, enablePoints, pointSize, currentPoint]);\n  var getPointFromMouseEvent = useCallback(function (event) {\n    var _getRelativeCursor = getRelativeCursor(canvasEl.current, event),\n        _getRelativeCursor2 = _slicedToArray$2(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    if (!isCursorInRect(margin.left, margin.top, innerWidth, innerHeight, x, y)) return null;\n    var pointIndex = delaunay.find(x - margin.left, y - margin.top);\n    return points[pointIndex];\n  }, [canvasEl, margin, innerWidth, innerHeight, delaunay]);\n\n  var _useTooltip = useTooltip(),\n      showTooltipFromEvent = _useTooltip.showTooltipFromEvent,\n      hideTooltip = _useTooltip.hideTooltip;\n\n  var handleMouseHover = useCallback(function (event) {\n    var point = getPointFromMouseEvent(event);\n    setCurrentPoint(point);\n\n    if (point) {\n      showTooltipFromEvent(React.createElement(tooltip, {\n        point: point\n      }), event);\n    } else {\n      hideTooltip();\n    }\n  }, [getPointFromMouseEvent, setCurrentPoint, showTooltipFromEvent, hideTooltip, tooltip]);\n  var handleMouseLeave = useCallback(function (event) {\n    hideTooltip();\n    setCurrentPoint(null);\n    currentPoint && onMouseLeave && onMouseLeave(currentPoint, event);\n  }, [hideTooltip, setCurrentPoint, onMouseLeave]);\n  var handleClick = useCallback(function (event) {\n    if (onClick) {\n      var point = getPointFromMouseEvent(event);\n      point && onClick(point, event);\n    }\n  }, [getPointFromMouseEvent, onClick]);\n  return React.createElement(\"canvas\", {\n    ref: canvasEl,\n    width: outerWidth * pixelRatio,\n    height: outerHeight * pixelRatio,\n    style: {\n      width: outerWidth,\n      height: outerHeight,\n      cursor: isInteractive ? 'auto' : 'normal'\n    },\n    onMouseEnter: isInteractive ? handleMouseHover : undefined,\n    onMouseMove: isInteractive ? handleMouseHover : undefined,\n    onMouseLeave: isInteractive ? handleMouseLeave : undefined,\n    onClick: isInteractive ? handleClick : undefined\n  });\n};\n\nLineCanvas.propTypes = LineCanvasPropTypes;\nLineCanvas.defaultProps = LineCanvasDefaultProps;\nvar LineCanvas$1 = withContainer(LineCanvas);\n\nfunction _extends$3() {\n  _extends$3 = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends$3.apply(this, arguments);\n}\n\nvar ResponsiveLineCanvas = function ResponsiveLineCanvas(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(LineCanvas$1, _extends$3({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nexport { Line$1 as Line, LineCanvas$1 as LineCanvas, LineCanvasDefaultProps, LineCanvasPropTypes, LineDefaultProps, LinePropTypes, ResponsiveLine, ResponsiveLineCanvas, useAreaGenerator, useLine, useLineGenerator, useSlices };","map":null,"metadata":{},"sourceType":"module"}