{"ast":null,"code":"var _jsxFileName = \"/Users/diego/Documents/8_semestre/Taller-de-Aplicaciones/inventarioFablab/src/registro/opciones/ListarRegistros.jsx\";\nimport React from 'react';\nimport { Item, Label, Header, Segment, Grid, Button, Modal, Table } from 'semantic-ui-react';\n\nfunction ListarRegistros({\n  registros\n}) {\n  var getFecha = seconds => {\n    var date = new Date(seconds);\n    var fechaString = \"\";\n    var months_arr = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];\n    var year = date.getFullYear();\n    var month = months_arr[date.getMonth()];\n    var day = date.getDate();\n    fechaString = day + '/' + month + '/' + year;\n    return fechaString;\n  };\n\n  return registros.map((registro, index) => {\n    const peticion = registro.peticion,\n          encargado = registro.encargado,\n          fecha = registro.fecha,\n          comentario = registro.comentario,\n          lista = registro.lista;\n    let fechastr = getFecha(fecha);\n    return React.createElement(Segment, {\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      textAlign: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      textAlign: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 28\n      },\n      __self: this\n    }, peticion)), React.createElement(Grid.Column, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32\n      },\n      __self: this\n    }, React.createElement(Label, {\n      as: \"a\",\n      color: \"orange\",\n      ribbon: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33\n      },\n      __self: this\n    }, fechastr))), React.createElement(Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      columns: \"equal\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37\n      },\n      __self: this\n    }, React.createElement(Grid.Column, {\n      textAlign: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h4\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, encargado)), React.createElement(Grid.Column, {\n      textAlign: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    }, peticion === 'Entrega de producto' && React.createElement(Modal, {\n      trigger: React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, \"Detalle\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, React.createElement(Table, {\n      singleLine: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Marca\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, \"Modelo\"), React.createElement(Table.HeaderCell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, \"Cantidad Pedida\"))), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }, lista.map((item, index) => {\n      const marca = item.marca,\n            modelo = item.modelo,\n            cantidad = item.cantidad;\n      return React.createElement(Table.Row, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, marca), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, modelo), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, cantidad));\n    })))))), peticion === 'Devolucion de producto' && React.createElement(Modal, {\n      trigger: React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, \"Detalle\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, React.createElement(Table, {\n      singleLine: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \"Marca\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, \"Modelo\"), React.createElement(Table.HeaderCell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, \"Cantidad devuelta\"))), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, lista.map((item, index) => {\n      const marca = item.marca,\n            modelo = item.modelo,\n            cantidad = item.cantidad;\n      return React.createElement(Table.Row, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 91\n        },\n        __self: this\n      }, marca), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }, modelo), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }, cantidad));\n    })))))), peticion === 'Actualizar stock' && React.createElement(Modal, {\n      trigger: React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, \"Detalle\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }, React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(Table, {\n      singleLine: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, \"Marca\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, \"Modelo\"), React.createElement(Table.HeaderCell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Cantidad Agregada\"), React.createElement(Table.HeaderCell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Cantidad Previa\"), React.createElement(Table.HeaderCell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, \"Cantidad Nueva\"))), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, lista.map((item, index) => {\n      const marca = item.marca,\n            modelo = item.modelo,\n            cantidad = item.cantidad,\n            stock = item.stock;\n      return React.createElement(Table.Row, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, marca), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, modelo), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, cantidad), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, stock), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, Number(stock) + Number(cantidad)));\n    })))))), peticion === 'Producto removido' && React.createElement(Modal, {\n      trigger: React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, \"Detalle\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, React.createElement(Table, {\n      singleLine: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, \"Marca\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, \"Modelo\"), React.createElement(Table.HeaderCell, {\n      textAlign: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, \"Cantidad Total\"))), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, lista.map((item, index) => {\n      const marca = item.marca,\n            modelo = item.modelo,\n            stock = item.stock;\n      return React.createElement(Table.Row, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, marca), React.createElement(Table.Cell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, modelo), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      }, stock));\n    })))))), peticion === 'Nuevo producto' && React.createElement(Modal, {\n      trigger: React.createElement(Button, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"Detalle\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }, React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176\n      },\n      __self: this\n    }, React.createElement(Modal.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }, React.createElement(Table, {\n      singleLine: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }, React.createElement(Table.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179\n      },\n      __self: this\n    }, React.createElement(Table.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, \"Codigo\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Marca\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Modelo\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, \"Cantidad\"), React.createElement(Table.HeaderCell, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Ubicaci\\xF3n\"))), React.createElement(Table.Body, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, lista.map((item, index) => {\n      const marca = item.marca,\n            modelo = item.modelo,\n            codigo = item.codigo,\n            ubicacion = item.ubicacion,\n            stock = item.stock;\n      return React.createElement(Table.Row, {\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, codigo), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, marca), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 195\n        },\n        __self: this\n      }, modelo), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, stock), React.createElement(Table.Cell, {\n        textAlign: \"center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, ubicacion));\n    })))))))), React.createElement(Item.Description, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }, comentario), React.createElement(Item.Extra, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }, React.createElement(Button, {\n      icon: \"file outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }))));\n  });\n}\n\nexport default ListarRegistros;","map":{"version":3,"sources":["/Users/diego/Documents/8_semestre/Taller-de-Aplicaciones/inventarioFablab/src/registro/opciones/ListarRegistros.jsx"],"names":["React","Item","Label","Header","Segment","Grid","Button","Modal","Table","ListarRegistros","registros","getFecha","seconds","date","Date","fechaString","months_arr","year","getFullYear","month","getMonth","day","getDate","map","registro","index","peticion","encargado","fecha","comentario","lista","fechastr","item","marca","modelo","cantidad","stock","Number","codigo","ubicacion"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Item, Label, Header, Segment, Grid, Button, Modal, Table } from 'semantic-ui-react'\n\n\nfunction ListarRegistros({ registros }) {\n\n    var getFecha = (seconds) => {\n        var date = new Date(seconds);\n        var fechaString = \"\";\n        var months_arr = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];\n        var year = date.getFullYear();\n        var month = months_arr[date.getMonth()];\n        var day = date.getDate();\n        fechaString = day + '/' + month + '/' + year;\n        return fechaString\n    }\n\n    return registros.map((registro, index) => {\n        const { peticion, encargado, fecha, comentario, lista } = registro\n        let fechastr = getFecha(fecha);\n\n        return (\n\n\n            <Segment key={index}>\n                <Grid columns=\"equal\" >\n                    <Grid.Column textAlign=\"left\" >\n                        <Header as='h3' textAlign='left'>\n                            {peticion}\n                        </Header>\n                    </Grid.Column>\n                    <Grid.Column  >\n                        <Label as='a' color='orange' ribbon='right'>{fechastr}</Label>\n                    </Grid.Column>\n                </Grid>\n                <Item>\n                    <Grid columns=\"equal\" >\n                        <Grid.Column textAlign=\"left\" >\n                            <Header as=\"h4\">{encargado}</Header>\n                        </Grid.Column>\n                        <Grid.Column textAlign=\"right\" >\n                            {\n                                peticion === 'Entrega de producto' &&\n                                <Modal trigger={<Button>Detalle</Button>}>\n                                    <Modal.Content >\n                                        <Modal.Description>\n                                            <Table singleLine>\n                                                <Table.Header>\n                                                    <Table.Row>\n                                                        <Table.HeaderCell >Marca</Table.HeaderCell>\n                                                        <Table.HeaderCell >Modelo</Table.HeaderCell>\n                                                        <Table.HeaderCell textAlign='center'>Cantidad Pedida</Table.HeaderCell>\n                                                    </Table.Row>\n                                                </Table.Header>\n                                                <Table.Body>\n                                                    {lista.map((item, index) => {\n                                                        const { marca, modelo, cantidad } = item\n                                                        return (\n                                                            <Table.Row key={index}>\n                                                                <Table.Cell>{marca}</Table.Cell>\n                                                                <Table.Cell>{modelo}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{cantidad}</Table.Cell>\n                                                            </Table.Row>\n                                                        )\n                                                    })\n                                                    }\n                                                </Table.Body>\n                                            </Table>\n                                        </Modal.Description>\n                                    </Modal.Content>\n                                </Modal>\n                            }\n                            {\n                                peticion === 'Devolucion de producto' &&\n                                <Modal trigger={<Button>Detalle</Button>}>\n                                    <Modal.Content >\n                                        <Modal.Description>\n                                            <Table singleLine>\n                                                <Table.Header>\n                                                    <Table.Row>\n                                                        <Table.HeaderCell >Marca</Table.HeaderCell>\n                                                        <Table.HeaderCell >Modelo</Table.HeaderCell>\n                                                        <Table.HeaderCell textAlign='center'>Cantidad devuelta</Table.HeaderCell>\n                                                    </Table.Row>\n                                                </Table.Header>\n                                                <Table.Body>\n                                                    {lista.map((item, index) => {\n                                                        const { marca, modelo, cantidad } = item\n                                                        return (\n                                                            <Table.Row key={index}>\n                                                                <Table.Cell>{marca}</Table.Cell>\n                                                                <Table.Cell>{modelo}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{cantidad}</Table.Cell>\n                                                            </Table.Row>\n                                                        )\n                                                    })\n                                                    }\n                                                </Table.Body>\n                                            </Table>\n                                        </Modal.Description>\n                                    </Modal.Content>\n                                </Modal>\n                            }\n                            {\n                                peticion === 'Actualizar stock' &&\n                                <Modal trigger={<Button>Detalle</Button>}>\n                                    <Modal.Content >\n                                        <Modal.Description>\n                                            <Table singleLine>\n                                                <Table.Header>\n                                                    <Table.Row>\n                                                        <Table.HeaderCell >Marca</Table.HeaderCell>\n                                                        <Table.HeaderCell >Modelo</Table.HeaderCell>\n                                                        <Table.HeaderCell textAlign='center'>Cantidad Agregada</Table.HeaderCell>\n                                                        <Table.HeaderCell textAlign='center'>Cantidad Previa</Table.HeaderCell>\n                                                        <Table.HeaderCell textAlign='center'>Cantidad Nueva</Table.HeaderCell>\n                                                    </Table.Row>\n                                                </Table.Header>\n                                                <Table.Body>\n                                                    {lista.map((item, index) => {\n                                                        const { marca, modelo, cantidad, stock } = item\n                                                        return (\n                                                            <Table.Row key={index}>\n                                                                <Table.Cell>{marca}</Table.Cell>\n                                                                <Table.Cell>{modelo}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{cantidad}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{stock}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{Number(stock)+Number(cantidad)}</Table.Cell>\n                                                            </Table.Row>\n                                                        )\n                                                    })\n                                                    }\n                                                </Table.Body>\n                                            </Table>\n                                        </Modal.Description>\n                                    </Modal.Content>\n                                </Modal>\n                            }\n                            {\n                                peticion === 'Producto removido' &&\n                                <Modal trigger={<Button>Detalle</Button>}>\n                                    <Modal.Content >\n                                        <Modal.Description>\n                                            <Table singleLine>\n                                                <Table.Header>\n                                                    <Table.Row>\n                                                        <Table.HeaderCell >Marca</Table.HeaderCell>\n                                                        <Table.HeaderCell >Modelo</Table.HeaderCell>\n                                                        <Table.HeaderCell textAlign='center'>Cantidad Total</Table.HeaderCell>\n\n                                                    </Table.Row>\n                                                </Table.Header>\n                                                <Table.Body>\n                                                    {lista.map((item, index) => {\n                                                        const { marca, modelo, stock } = item\n                                                        return (\n                                                            <Table.Row key={index}>\n                                                                <Table.Cell>{marca}</Table.Cell>\n                                                                <Table.Cell>{modelo}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{stock}</Table.Cell>\n                                                               \n                                                            </Table.Row>\n                                                        )\n                                                    })\n                                                    }\n                                                </Table.Body>\n                                            </Table>\n                                        </Modal.Description>\n                                    </Modal.Content>\n                                </Modal>\n                            }\n\n                            {\n                                peticion === 'Nuevo producto' &&\n                                <Modal trigger={<Button>Detalle</Button>}>\n                                    <Modal.Content >\n                                        <Modal.Description>\n                                            <Table singleLine>\n                                                <Table.Header>\n                                                    <Table.Row>\n                                                        <Table.HeaderCell >Codigo</Table.HeaderCell>\n                                                        <Table.HeaderCell >Marca</Table.HeaderCell>\n                                                        <Table.HeaderCell >Modelo</Table.HeaderCell>\n                                                        <Table.HeaderCell >Cantidad</Table.HeaderCell>\n                                                        <Table.HeaderCell >Ubicación</Table.HeaderCell>                                                        \n                                                    </Table.Row>\n                                                </Table.Header>\n                                                <Table.Body>\n                                                    {lista.map((item, index) => {\n                                                        const { marca, modelo, codigo, ubicacion, stock } = item\n                                                        return (\n                                                            <Table.Row key={index}>\n                                                                <Table.Cell textAlign='center'>{codigo}</Table.Cell>\n                                                                <Table.Cell textAlign='center'>{marca}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{modelo}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{stock}</Table.Cell>\n                                                                <Table.Cell textAlign='center' >{ubicacion}</Table.Cell>\n                                                            </Table.Row>\n                                                        )\n                                                    })\n                                                    }\n                                                </Table.Body>\n                                            </Table>\n                                        </Modal.Description>\n                                    </Modal.Content>\n                                </Modal>\n                            }\n                            \n\n                        </Grid.Column>\n                    </Grid>\n                    <Item.Description>\n                        {comentario}\n                    </Item.Description>\n                    <Item.Extra>\n                        <Button icon=\"file outline\" ></Button>\n                    </Item.Extra>\n                </Item>\n            </Segment>\n        )\n    })\n}\n\nexport default ListarRegistros\n"]},"metadata":{},"sourceType":"module"}