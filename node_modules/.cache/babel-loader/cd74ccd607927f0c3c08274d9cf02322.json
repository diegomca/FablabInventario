{"ast":null,"code":"import React, { Fragment, useMemo, useRef, useState, useCallback } from 'react';\nimport { withTheme, withDimensions, Container, SvgWrapper, ResponsiveWrapper, getRelativeCursor } from '@nivo/core';\nimport { scaleLinear } from 'd3-scale';\nimport { Delaunay } from 'd3-delaunay';\nimport compose from 'recompose/compose';\nimport defaultProps from 'recompose/defaultProps';\nimport withPropsOnChange from 'recompose/withPropsOnChange';\nimport pure from 'recompose/pure';\nimport PropTypes from 'prop-types';\nvar VoronoiPropTypes = {\n  data: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,\n    x: PropTypes.number.isRequired,\n    y: PropTypes.number.isRequired\n  })).isRequired,\n  xDomain: PropTypes.arrayOf(PropTypes.number).isRequired,\n  yDomain: PropTypes.arrayOf(PropTypes.number).isRequired,\n  layers: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.oneOf(['links', 'cells', 'points', 'bounds']), PropTypes.func])).isRequired,\n  enableLinks: PropTypes.bool.isRequired,\n  linkLineWidth: PropTypes.number.isRequired,\n  linkLineColor: PropTypes.string.isRequired,\n  enableCells: PropTypes.bool.isRequired,\n  cellLineWidth: PropTypes.number.isRequired,\n  cellLineColor: PropTypes.string.isRequired,\n  enablePoints: PropTypes.bool.isRequired,\n  pointSize: PropTypes.number.isRequired,\n  pointColor: PropTypes.string.isRequired,\n  delaunay: PropTypes.object.isRequired,\n  voronoi: PropTypes.object.isRequired\n};\nvar VoronoiDefaultProps = {\n  xDomain: [0, 1],\n  yDomain: [0, 1],\n  layers: ['links', 'cells', 'points', 'bounds'],\n  enableLinks: false,\n  linkLineWidth: 1,\n  linkLineColor: '#bbb',\n  enableCells: true,\n  cellLineWidth: 2,\n  cellLineColor: '#000',\n  enablePoints: true,\n  pointSize: 4,\n  pointColor: '#666'\n};\n\nvar enhance = function (Component) {\n  return compose(defaultProps(VoronoiDefaultProps), withTheme(), withDimensions(), withPropsOnChange(['xDomain', 'yDomain', 'width', 'height'], function (_ref) {\n    var xDomain = _ref.xDomain,\n        yDomain = _ref.yDomain,\n        width = _ref.width,\n        height = _ref.height;\n    return {\n      xScale: scaleLinear().domain(xDomain).range([0, width]),\n      yScale: scaleLinear().domain(yDomain).range([0, height])\n    };\n  }), withPropsOnChange(['data', 'xScale', 'yScale'], function (_ref2) {\n    var data = _ref2.data,\n        xScale = _ref2.xScale,\n        yScale = _ref2.yScale;\n    return {\n      scaledPoints: data.map(function (d) {\n        return {\n          data: d,\n          x: xScale(d.x),\n          y: yScale(d.y)\n        };\n      })\n    };\n  }), withPropsOnChange(['scaledPoints', 'width', 'height'], function (_ref3) {\n    var scaledPoints = _ref3.scaledPoints,\n        width = _ref3.width,\n        height = _ref3.height;\n    var delaunay = Delaunay.from(scaledPoints.map(function (p) {\n      return [p.x, p.y];\n    }));\n    var voronoi = delaunay.voronoi([0, 0, width, height]);\n    return {\n      delaunay: delaunay,\n      voronoi: voronoi\n    };\n  }), pure)(Component);\n};\n\nvar Voronoi = function Voronoi(_ref) {\n  var delaunay = _ref.delaunay,\n      voronoi = _ref.voronoi,\n      data = _ref.data,\n      layers = _ref.layers,\n      margin = _ref.margin,\n      width = _ref.width,\n      height = _ref.height,\n      outerWidth = _ref.outerWidth,\n      outerHeight = _ref.outerHeight,\n      enableLinks = _ref.enableLinks,\n      linkLineWidth = _ref.linkLineWidth,\n      linkLineColor = _ref.linkLineColor,\n      enableCells = _ref.enableCells,\n      cellLineWidth = _ref.cellLineWidth,\n      cellLineColor = _ref.cellLineColor,\n      enablePoints = _ref.enablePoints,\n      pointSize = _ref.pointSize,\n      pointColor = _ref.pointColor,\n      theme = _ref.theme;\n  var context = {\n    width: width,\n    height: height,\n    data: data,\n    delaunay: delaunay,\n    voronoi: voronoi\n  };\n  var layerById = {\n    bounds: React.createElement(\"path\", {\n      key: \"bounds\",\n      fill: \"none\",\n      stroke: cellLineColor,\n      strokeWidth: cellLineWidth,\n      d: voronoi.renderBounds()\n    })\n  };\n\n  if (enableLinks === true) {\n    layerById.links = React.createElement(\"path\", {\n      key: \"links\",\n      stroke: linkLineColor,\n      strokeWidth: linkLineWidth,\n      fill: \"none\",\n      d: delaunay.render()\n    });\n  }\n\n  if (enableCells === true) {\n    layerById.cells = React.createElement(\"path\", {\n      key: \"cells\",\n      d: voronoi.render(),\n      fill: \"none\",\n      stroke: cellLineColor,\n      strokeWidth: cellLineWidth\n    });\n  }\n\n  if (enablePoints === true) {\n    layerById.points = React.createElement(\"path\", {\n      key: \"points\",\n      stroke: \"none\",\n      fill: pointColor,\n      d: delaunay.renderPoints(undefined, pointSize / 2)\n    });\n  }\n\n  return React.createElement(Container, {\n    isInteractive: false,\n    theme: theme,\n    animate: false\n  }, function () {\n    return React.createElement(SvgWrapper, {\n      width: outerWidth,\n      height: outerHeight,\n      margin: margin,\n      theme: theme\n    }, layers.map(function (layer, i) {\n      if (typeof layer === 'function') {\n        return React.createElement(Fragment, {\n          key: i\n        }, layer(context));\n      }\n\n      return layerById[layer];\n    }));\n  });\n};\n\nVoronoi.propTypes = VoronoiPropTypes;\nvar Voronoi$1 = enhance(Voronoi);\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar ResponsiveVoronoi = function ResponsiveVoronoi(props) {\n  return React.createElement(ResponsiveWrapper, null, function (_ref) {\n    var width = _ref.width,\n        height = _ref.height;\n    return React.createElement(Voronoi$1, _extends({\n      width: width,\n      height: height\n    }, props));\n  });\n};\n\nvar getAccessor = function getAccessor(directive) {\n  return typeof directive === 'function' ? directive : function (d) {\n    return d[directive];\n  };\n};\n\nvar computeMeshPoints = function computeMeshPoints(_ref) {\n  var points = _ref.points,\n      _ref$x = _ref.x,\n      x = _ref$x === void 0 ? 'x' : _ref$x,\n      _ref$y = _ref.y,\n      y = _ref$y === void 0 ? 'y' : _ref$y;\n  var getX = getAccessor(x);\n  var getY = getAccessor(y);\n  return points.map(function (p) {\n    return [getX(p), getY(p)];\n  });\n};\n\nvar computeMesh = function computeMesh(_ref2) {\n  var points = _ref2.points,\n      width = _ref2.width,\n      height = _ref2.height,\n      debug = _ref2.debug;\n  var delaunay = Delaunay.from(points);\n  var voronoi = debug === true ? delaunay.voronoi([0, 0, width, height]) : undefined;\n  return {\n    delaunay: delaunay,\n    voronoi: voronoi\n  };\n};\n\nvar useVoronoiMesh = function useVoronoiMesh(_ref) {\n  var points = _ref.points,\n      x = _ref.x,\n      y = _ref.y,\n      width = _ref.width,\n      height = _ref.height,\n      debug = _ref.debug;\n  var points2d = useMemo(function () {\n    return computeMeshPoints({\n      points: points,\n      x: x,\n      y: y\n    });\n  }, [points, x, y]);\n  return useMemo(function () {\n    return computeMesh({\n      points: points2d,\n      width: width,\n      height: height,\n      debug: debug\n    });\n  }, [points2d, width, height, debug]);\n};\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nvar Mesh = function Mesh(_ref) {\n  var nodes = _ref.nodes,\n      width = _ref.width,\n      height = _ref.height,\n      x = _ref.x,\n      y = _ref.y,\n      debug = _ref.debug,\n      onMouseEnter = _ref.onMouseEnter,\n      onMouseMove = _ref.onMouseMove,\n      onMouseLeave = _ref.onMouseLeave,\n      onClick = _ref.onClick;\n  var elementRef = useRef(null);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentIndex = _useState2[0],\n      setCurrentIndex = _useState2[1];\n\n  var _useVoronoiMesh = useVoronoiMesh({\n    points: nodes,\n    x: x,\n    y: y,\n    width: width,\n    height: height,\n    debug: debug\n  }),\n      delaunay = _useVoronoiMesh.delaunay,\n      voronoi = _useVoronoiMesh.voronoi;\n\n  var voronoiPath = useMemo(function () {\n    return debug ? voronoi.render() : undefined;\n  });\n  var getIndexAndNodeFromEvent = useCallback(function (event) {\n    var _getRelativeCursor = getRelativeCursor(elementRef.current, event),\n        _getRelativeCursor2 = _slicedToArray(_getRelativeCursor, 2),\n        x = _getRelativeCursor2[0],\n        y = _getRelativeCursor2[1];\n\n    var index = delaunay.find(x, y);\n    return [index, index !== undefined ? nodes[index] : null];\n  }, [delaunay]);\n  var handleMouseEnter = useCallback(function (event) {\n    var _getIndexAndNodeFromE = getIndexAndNodeFromEvent(event),\n        _getIndexAndNodeFromE2 = _slicedToArray(_getIndexAndNodeFromE, 2),\n        index = _getIndexAndNodeFromE2[0],\n        node = _getIndexAndNodeFromE2[1];\n\n    if (currentIndex !== index) setCurrentIndex(index);\n    node && onMouseEnter && onMouseEnter(node, event);\n  }, [getIndexAndNodeFromEvent, setCurrentIndex]);\n  var handleMouseMove = useCallback(function (event) {\n    var _getIndexAndNodeFromE3 = getIndexAndNodeFromEvent(event),\n        _getIndexAndNodeFromE4 = _slicedToArray(_getIndexAndNodeFromE3, 2),\n        index = _getIndexAndNodeFromE4[0],\n        node = _getIndexAndNodeFromE4[1];\n\n    if (currentIndex !== index) setCurrentIndex(index);\n    node && onMouseMove && onMouseMove(node, event);\n  }, [getIndexAndNodeFromEvent, setCurrentIndex]);\n  var handleMouseLeave = useCallback(function (event) {\n    setCurrentIndex(null);\n\n    if (onMouseLeave) {\n      var previousNode;\n\n      if (currentIndex !== undefined && currentIndex !== null) {\n        previousNode = nodes[currentIndex];\n      }\n\n      onMouseLeave(previousNode, event);\n    }\n  }, [setCurrentIndex]);\n  var handleClick = useCallback(function (event) {\n    var _getIndexAndNodeFromE5 = getIndexAndNodeFromEvent(event),\n        _getIndexAndNodeFromE6 = _slicedToArray(_getIndexAndNodeFromE5, 2),\n        index = _getIndexAndNodeFromE6[0],\n        node = _getIndexAndNodeFromE6[1];\n\n    if (currentIndex !== index) setCurrentIndex(index);\n    onClick && onClick(node, event);\n  }, [getIndexAndNodeFromEvent, setCurrentIndex]);\n  return React.createElement(\"g\", {\n    ref: elementRef\n  }, debug && React.createElement(\"path\", {\n    d: voronoiPath,\n    stroke: \"red\",\n    strokeWidth: 1,\n    opacity: 0.75\n  }), currentIndex !== null && debug && React.createElement(\"path\", {\n    fill: \"red\",\n    opacity: 0.35,\n    d: voronoi.renderCell(currentIndex)\n  }), React.createElement(\"rect\", {\n    width: width,\n    height: height,\n    fill: \"red\",\n    opacity: 0,\n    style: {\n      cursor: 'auto'\n    },\n    onMouseEnter: handleMouseEnter,\n    onMouseMove: handleMouseMove,\n    onMouseLeave: handleMouseLeave,\n    onClick: handleClick\n  }));\n};\n\nMesh.propTypes = {\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  nodes: PropTypes.array.isRequired,\n  x: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]).isRequired,\n  y: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.func]).isRequired,\n  onMouseEnter: PropTypes.func,\n  onMouseMove: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onClick: PropTypes.func,\n  debug: PropTypes.bool.isRequired\n};\nMesh.defaultProps = {\n  x: 'x',\n  y: 'y',\n  debug: false\n};\n\nvar renderVoronoiToCanvas = function renderVoronoiToCanvas(ctx, voronoi) {\n  ctx.save();\n  ctx.globalAlpha = 0.75;\n  ctx.beginPath();\n  voronoi.render(ctx);\n  ctx.strokeStyle = 'red';\n  ctx.lineWidth = 1;\n  ctx.stroke();\n  ctx.restore();\n};\n\nvar renderVoronoiCellToCanvas = function renderVoronoiCellToCanvas(ctx, voronoi, index) {\n  ctx.save();\n  ctx.globalAlpha = 0.35;\n  ctx.beginPath();\n  voronoi.renderCell(index, ctx);\n  ctx.fillStyle = 'red';\n  ctx.fill();\n  ctx.restore();\n};\n\nexport { Mesh, ResponsiveVoronoi, Voronoi$1 as Voronoi, VoronoiDefaultProps, VoronoiPropTypes, computeMesh, computeMeshPoints, renderVoronoiCellToCanvas, renderVoronoiToCanvas, useVoronoiMesh };","map":null,"metadata":{},"sourceType":"module"}